{"version":3,"sources":["serviceWorker.js","board/square/Square.jsx","board/Board.jsx","stats/Stats.jsx","login/Login.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Square","props","width","height","fill","shadowBlur","onClick","text","value","x","y","fontSize","Board","refresh","winner","getWinner","state","squares","Array","setState","playerIsNext","getStat","line","a","b","c","this","name","includes","slice","flag","i","Math","floor","random","setTimeout","ai","handleClick","next","className","renderSquare","React","Component","Stats","player","computer","Login","handler","ref","current","createRef","onChange","type","placeholder","to","disabled","App","e","loginHandler","exact","path","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea1804c1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport { Rect, Text, Stage, Layer } from 'react-konva';\r\n\r\nconst Square = (props) => {\r\n    return (\r\n        <Stage width={105} height={105}>\r\n            <Layer>\r\n                <Rect\r\n                    width={100}\r\n                    height={100}\r\n                    fill=\"#2e9ef6\"\r\n                    shadowBlur={5}\r\n                    onClick={props.onClick}\r\n                />\r\n                <Text\r\n                    text={props.value}\r\n                    fill='#fff'\r\n                    x={30}\r\n                    y={30}\r\n                    fontSize={60}\r\n                />\r\n            </Layer>\r\n        </Stage>\r\n    );\r\n}\r\n\r\nexport default Square;\r\n\r\n","import React from 'react';\r\nimport Square from './square/Square';\r\n\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            squares: new Array(9).fill(null),\r\n            playerIsNext: true\r\n        };\r\n    }\r\n\r\n    getWinner(squares) {\r\n        const lines = [\r\n            [0, 1, 2],\r\n            [3, 4, 5],\r\n            [6, 7, 8],\r\n            [0, 3, 6],\r\n            [1, 4, 7],\r\n            [2, 5, 8],\r\n            [0, 4, 8],\r\n            [2, 4, 6],\r\n        ];\r\n        for (let line of lines) {\r\n            const [a, b, c] = line;\r\n            if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n                if (squares[a] === 'O') {\r\n                    return 'Computer'\r\n                }\r\n                else {\r\n                    return this.props.name\r\n                }\r\n            }\r\n        }\r\n        if (!squares.includes(null)) {\r\n            return 'Frendship'\r\n        }\r\n        return false;\r\n    }\r\n\r\n    ai() {\r\n        const squares = this.state.squares.slice();\r\n        let getRandom = () => Math.floor(Math.random() * (8 + 1));\r\n        let flag = true;\r\n        do {\r\n            let i = getRandom();\r\n            if (!squares[i]) {\r\n                squares[i] = 'O';\r\n                this.setState({\r\n                    squares: squares,\r\n                    playerIsNext: !this.state.playerIsNext\r\n                });\r\n                flag = false;\r\n                this.getWinner(this.state.squares);\r\n            }\r\n        } while (flag)\r\n    }\r\n\r\n    handleClick(i) {\r\n        let squares = this.state.squares.slice();\r\n        let winner = this.getWinner(this.state.squares);\r\n        if (winner || squares[i]) {\r\n            return false;\r\n        }\r\n        squares[i] = 'X';\r\n        this.setState({\r\n            squares: squares,\r\n            playerIsNext: !this.state.playerIsNext\r\n        });\r\n        winner = this.getWinner(this.state.squares);\r\n        if (!winner) {\r\n            setTimeout(() => { this.ai() }, 300)\r\n        }\r\n    }\r\n\r\n    renderSquare(i) {\r\n        return (\r\n            <Square\r\n                value={this.state.squares[i]}\r\n                onClick={() => this.handleClick(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    refresh = () => {\r\n        const winner = this.getWinner(this.state.squares);\r\n        const squares = new Array(9).fill(null);\r\n        this.setState({\r\n            squares: squares,\r\n            playerIsNext: true\r\n        });\r\n        this.props.getStat(winner)\r\n    }\r\n\r\n    render() {\r\n        const winner = this.getWinner(this.state.squares);\r\n        let next = null;\r\n        if (winner) {\r\n            next = `${winner} is winner`;\r\n        }\r\n        else {\r\n            next = `Next player: ${this.state.playerIsNext ? this.props.name : 'Computer'}`;\r\n        }\r\n\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <div className=\"next\">{next}</div>\r\n                <div className=\"wrapper-board\">\r\n                    <div className=\"board-row\">\r\n                        {this.renderSquare(0)}\r\n                        {this.renderSquare(1)}\r\n                        {this.renderSquare(2)}\r\n                    </div>\r\n                    <div className=\"board-row\">\r\n                        {this.renderSquare(3)}\r\n                        {this.renderSquare(4)}\r\n                        {this.renderSquare(5)}\r\n                    </div>\r\n                    <div className=\"board-row\">\r\n                        {this.renderSquare(6)}\r\n                        {this.renderSquare(7)}\r\n                        {this.renderSquare(8)}\r\n                    </div>\r\n                </div>\r\n                <div className=\"refresh\" onClick={this.refresh}>{winner ? 'New game' : 'Refresh field'}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\n\r\nconst Stats = (props) => {\r\n        return (\r\n            <div className=\"stats\">\r\n                <div>{props.name}: {props.player}</div>\r\n                <div>Computer: {props.computer}</div>\r\n                {props.winner}\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default Stats;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Login extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.ref = React.createRef();\r\n    }\r\n\r\n    handler = () => {\r\n        const value = this.ref.current.value;\r\n        this.props.handler(value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"input-wrapper\">\r\n                <div className=\"input-text\">Choose your nickname</div>\r\n                <input onChange={this.handler} className=\"input\" ref={this.ref} type='text' placeholder=\"Type here...\" />\r\n                <Link to=\"/app\"><button disabled={this.props.disabled} className=\"btn\">Submit</button></Link>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Login;","import React from 'react';\nimport Board from './board/Board';\nimport Stats from './stats/Stats';\nimport Login from './login/Login';\nimport { Route } from \"react-router-dom\";\n\nclass App extends React.Component {\n    state = {\n        player: 0,\n        computer: 0,\n        name: 'Player',\n        disabled: true,\n    }\n\n    getStat = (e) => {\n        let computer = this.state.computer;\n        let player = this.state.player\n        if (e === this.state.name) {\n            player++\n            this.setState({ player: player })\n        }\n        else if (e === 'Computer') {\n            computer++\n            this.setState({ computer: computer })\n        }\n    }\n\n    loginHandler = (e) => {\n        this.setState({ name: e, disabled: false })\n    }\n\n    render() {\n        return (\n            <div>\n                <Route exact path='/'><Login disabled={this.state.disabled} handler={this.loginHandler} /></Route>\n                <Route path='/app'>\n                    <Board getStat={this.getStat} name={this.state.name} />\n                    <Stats player={this.state.player} name={this.state.name} computer={this.state.computer} />\n                </Route>\n            </div>\n        );\n    }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\nimport { HashRouter } from \"react-router-dom\";\n\n\n// ========================================\n\nReactDOM.render(\n    <HashRouter basename='/'>\n        <App />\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}